"""
users.py

–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π User_Contacts_VBA –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL.
–í–∫–ª—é—á–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞ —Ç–∞–∫–∂–µ —Ä–∞–±–æ—Ç—ã —Å —Ä–æ–ª—è–º–∏.
"""

import asyncio
import logging
from typing import Optional
from db.connection import connect_db


async def get_user_role_by_id(user_id: int) -> str:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        user_id (int): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        str: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    loop = asyncio.get_running_loop()
    try:
        return await loop.run_in_executor(None, get_user_role, user_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ get_user_role_by_id –¥–ª—è user_id={user_id}: {e}")
        return "noauth"


def get_user_role(user_id: int) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.

    Args:
        user_id (int): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        str: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ª–∏–±–æ "noauth", –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.
    """
    query = "SELECT role FROM User_Contacts_VBA WHERE user_id = %s"
    try:
        with connect_db() as conn:
            with conn.cursor() as cur:
                cur.execute(query, (user_id,))
                result = cur.fetchone()
                return result[0] if result else "noauth"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return "noauth"


def get_all_user_roles() -> list[tuple[int, str]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Ä–æ–ª–µ–π.

    Returns:
        list[tuple[int, str]]: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (user_id, role).
    """
    query = "SELECT user_id, role FROM User_Contacts_VBA"
    try:
        with connect_db() as conn:
            with conn.cursor() as cur:
                cur.execute(query)
                return cur.fetchall()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ä–æ–ª–µ–π: {e}")
        return []


def get_all_roles_from_db() -> list[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.

    Returns:
        list[str]: –°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π.
    """
    query = "SELECT DISTINCT role FROM User_Contacts_VBA WHERE role IS NOT NULL"
    try:
        with connect_db() as conn:
            with conn.cursor() as cur:
                cur.execute(query)
                return [row[0] for row in cur.fetchall()]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–æ–ª–µ–π: {e}")
        return []


def fetch_users_by_role(role: str, limit: int = None, offset: int = 0) -> list[tuple[int, str, str]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é (user_id, username, phone_number).

    Args:
        role (str): –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'auth', 'admin').
        limit (int, optional): –ö–æ–ª-–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤—ã–±–æ—Ä–∫–∏.
        offset (int, optional): –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.

    Returns:
        list[tuple[int, str, str]]: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π —Å user_id, username, phone_number.
    """
    query = """
    SELECT user_id, username, phone_number FROM User_Contacts_VBA
    WHERE role = %s
    ORDER BY user_id
    """
    try:
        with connect_db() as conn:
            with conn.cursor() as cur:
                if limit:
                    query += " LIMIT %s OFFSET %s"
                    cur.execute(query, (role, limit, offset))
                else:
                    cur.execute(query, (role,))
                return cur.fetchall()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é '{role}': {e}")
        return []


def get_users_by_role(role: str) -> list[int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ user_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é.

    Args:
        role (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏.

    Returns:
        list[int]: –°–ø–∏—Å–æ–∫ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    query = "SELECT user_id FROM User_Contacts_VBA WHERE role = %s"
    try:
        with connect_db() as conn:
            with conn.cursor() as cur:
                cur.execute(query, (role,))
                return [row[0] for row in cur.fetchall()]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª–∏ '{role}': {e}")
        return []


def fetch_user_by_user_id(user_id: int) -> Optional[tuple]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ –µ–≥–æ ID.

    Args:
        user_id (int): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        Optional[tuple]: –ö–æ—Ä—Ç–µ–∂ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None.
    """
    query = """
    SELECT user_id, username, phone_number
    FROM User_Contacts_VBA
    WHERE user_id = %s
    LIMIT 1
    """
    try:
        with connect_db() as conn:
            with conn.cursor() as cur:
                cur.execute(query, (user_id,))
                return cur.fetchone()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None


def fetch_all_users() -> list[tuple]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

    Returns:
        list[tuple]: –ö–æ—Ä—Ç–µ–∂–∏ (user_id, username, phone_number, timestamp, comment, role)
    """
    query = """
    SELECT user_id, username, phone_number, timestamp, comment, role
    FROM User_Contacts_VBA
    ORDER BY timestamp ASC
    """
    try:
        with connect_db() as conn:
            with conn.cursor() as cur:
                cur.execute(query)
                return cur.fetchall()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []


def save_user(user_id: int, username: Optional[str] = None, phone_number: Optional[str] = None) -> None:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.

    Args:
        user_id (int): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        username (Optional[str]): –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        phone_number (Optional[str]): –¢–µ–ª–µ—Ñ–æ–Ω, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω.

    Note:
        –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è.
    """
    query = """
    INSERT INTO User_Contacts_VBA (user_id, username, phone_number)
    VALUES (%s, %s, %s)
    ON CONFLICT (user_id)
    DO UPDATE SET username = EXCLUDED.username,
                  phone_number = CASE 
                                   WHEN EXCLUDED.phone_number IS NULL 
                                   THEN User_Contacts_VBA.phone_number 
                                   ELSE EXCLUDED.phone_number 
                                 END;
    """
    try:
        with connect_db() as conn:
            with conn.cursor() as cur:
                cur.execute(query, (user_id, username, phone_number))
                conn.commit()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


async def update_user_role(user_id: int, new_role: str, phone_number: str = None) -> bool:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∞ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏, False –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    query = """
        UPDATE public.user_contacts_vba
        SET role = %s, phone_number = %s
        WHERE user_id = %s
    """

    if phone_number is None:
        query = """
            UPDATE public.user_contacts_vba
            SET role = %s
            WHERE user_id = %s
        """
        params = (new_role, user_id)
    else:
        params = (new_role, phone_number, user_id)

    print(f"üî≤ –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")

    try:
        with connect_db() as conn:
            with conn.cursor() as cur:
                cur.execute(query, params)
                conn.commit()

                if cur.rowcount > 0:
                    print(f"üî≤ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
                    return True
                else:
                    print(f"‚ö† –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.")
                    return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


def update_comment(user_id: int, comment: str) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        user_id (int): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        comment (str): –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
    """
    query = "UPDATE User_Contacts_VBA SET comment = %s WHERE user_id = %s"
    try:
        with connect_db() as conn:
            with conn.cursor() as cur:
                cur.execute(query, (comment, user_id))
                conn.commit()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
