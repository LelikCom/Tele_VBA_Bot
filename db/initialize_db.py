import logging
import json
from pathlib import Path
from db.connection import connect_db
import psycopg2

logging.basicConfig(level=logging.INFO)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
def create_tables():
    try:
        logging.info("üöÄ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = psycopg2.connect(
            dbname="AIchetovkin",
            user="AIchetovkin",
            password="Ichetovkin",
            host="postgres_db",  # –ò–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            port="5432"
        )

        logging.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

        # –°–æ–∑–¥–∞–µ–º –∫—É—Ä—Å–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
        cur = conn.cursor()

        # –ó–∞–ø—Ä–æ—Å—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        queries = [
            """
            CREATE TABLE IF NOT EXISTS User_Contacts_VBA (
                user_id BIGINT PRIMARY KEY,
                username TEXT,
                phone_number TEXT,
                timestamp TIMESTAMP WITHOUT TIME ZONE NOT NULL
                          DEFAULT (CURRENT_TIMESTAMP AT TIME ZONE 'Europe/Moscow'),
                comment TEXT,
                role TEXT NOT NULL DEFAULT 'noauth'
            );
            """,
            """
            CREATE TABLE IF NOT EXISTS vba_unit (
                id SERIAL PRIMARY KEY,
                vba_name TEXT NOT NULL UNIQUE,
                vba_code TEXT NOT NULL
            );
            """,
            """
            CREATE TABLE IF NOT EXISTS vba_formule (
                id SERIAL PRIMARY KEY,
                vba_formule_name TEXT NOT NULL UNIQUE,
                vba_formule_code TEXT NOT NULL,
                comment_vba_formule TEXT
            );
            """,
            """
            CREATE TABLE IF NOT EXISTS feedback (
                id SERIAL PRIMARY KEY,
                user_id BIGINT NOT NULL,
                theme TEXT NOT NULL,
                message TEXT NOT NULL,
                is_read BOOLEAN NOT NULL DEFAULT FALSE,
                attachment TEXT,
                attachment_type TEXT,
                created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL
                            DEFAULT (CURRENT_TIMESTAMP AT TIME ZONE 'Europe/Moscow')
            );
            """,
            """
            CREATE TABLE dialog_log (
                id SERIAL PRIMARY KEY,
                session_id TEXT NOT NULL,
                step INT NOT NULL,
                user_id BIGINT NOT NULL,
                username TEXT NOT NULL,
                id_question INT NOT NULL,
                question TEXT NOT NULL,
                time_question TIMESTAMP NOT NULL,
                id_answer INT,
                answer TEXT,
                time_answer TIMESTAMP,
                point TEXT
            );
            """
        ]

        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã
        for query in queries:
            logging.info(f"‚öôÔ∏è –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å: {query[:30]}...")  # –ü—Ä–∏–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            cur.execute(query)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()

        logging.info("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        cur.close()
        conn.close()

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–æ–≤
def load_initial_macros(path: Path) -> None:
    try:
        logging.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–∫—Ä–æ—Å—ã –∏–∑ {path}...")
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)

        macros = data.get("macros", [])
        with connect_db() as conn:
            with conn.cursor() as cur:
                for macro in macros:
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    query = """
                    INSERT INTO vba_unit (vba_name, vba_code)
                    VALUES (%s, %s)
                    ON CONFLICT (vba_name) DO NOTHING
                    """
                    cur.execute(
                        query, (
                            macro["vba_name"],
                            macro["vba_code"]
                        )
                    )
                conn.commit()
        logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–∞–∫—Ä–æ—Å–æ–≤: {len(macros)}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞–∫—Ä–æ—Å–æ–≤: {e}")


def load_initial_formules(path: Path) -> None:
    try:
        print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ä–º—É–ª—ã –∏–∑ {path}...")
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)

        formules = data.get("formule", [])
        with connect_db() as conn:
            with conn.cursor() as cur:
                for fml in formules:
                    cur.execute(
                        """
                        INSERT INTO vba_formule (vba_formule_name, vba_formule_code, comment_vba_formule)
                        VALUES (%s, %s, %s)
                        ON CONFLICT (vba_formule_name) DO NOTHING
                        """,
                        (fml["vba_name"], fml["vba_code"], fml.get("comment", "")),
                    )
                conn.commit()
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ä–º—É–ª: {len(formules)}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ä–º—É–ª: {e}")


def load_initial_admins(path: Path) -> None:
    try:
        print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ {path}...")
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)

        admins = data.get("admins", [])
        with connect_db() as conn:
            with conn.cursor() as cur:
                for admin in admins:
                    cur.execute(
                        """
                        INSERT INTO User_Contacts_VBA (user_id, username, phone_number, comment, role)
                        VALUES (%s, %s, %s, %s, %s)
                        ON CONFLICT (user_id) DO UPDATE
                        SET username = EXCLUDED.username,
                            phone_number = COALESCE(EXCLUDED.phone_number, User_Contacts_VBA.phone_number),
                            comment = EXCLUDED.comment,
                            role = EXCLUDED.role
                        """,
                        (
                            admin["user_id"],
                            admin.get("username"),
                            admin.get("phone_number"),
                            admin.get("comment", ""),
                            admin.get("role", "admin"),
                        ),
                    )
                conn.commit()
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(admins)}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")


def populate_initial_data() -> None:
    print("–ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    seeds_dir = Path(__file__).parent / "seeds"
    load_initial_macros(seeds_dir / "macros.json")
    load_initial_formules(seeds_dir / "formules.json")
    load_initial_admins(seeds_dir / "admin_users.json")


# –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞
create_tables()  # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
populate_initial_data()  # –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö