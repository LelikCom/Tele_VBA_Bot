"""
handle_admin_pre_auth.py

–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
"""

import os
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from db.users import fetch_user_by_user_id

ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))
logger = logging.getLogger(__name__)
AVAILABLE_ROLES = ["auth", "noauth", "admin", "rejected", "preauth"]


async def handle_pre_auth_user_select(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é `preauth` –∏–∑ —Å–ø–∏—Å–∫–∞.

    Args:
        update (Update): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram.
    """
    query = update.callback_query
    await query.answer()

    try:
        _, _, role, user_id_str = query.data.split("_", 3)

        if role != "preauth":
            await query.edit_message_text("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è preauth.")
            return

        user_data = await fetch_user_by_user_id(int(user_id_str))
        if not user_data:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        tg_id, username, phone = user_data
        text = (
            f"üìÑ –ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username or '–±–µ–∑ username'}\n"
            f"‚Ä¢ ID: {tg_id}\n"
            f"‚Ä¢ –ù–æ–º–µ—Ä: {phone}"
        )

        buttons = [
            [
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"auth_approve_{tg_id}_{phone}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"auth_reject_{tg_id}_{phone}")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_roles")]
        ]

        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.MARKDOWN
        )

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è preauth: %s", e, exc_info=True)
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏.")
