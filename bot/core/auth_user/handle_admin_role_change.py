"""
handle_admin_role_change.py

–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:
- –≤—ã–±–æ—Ä –Ω–æ–≤–æ–π —Ä–æ–ª–∏
- –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã
- –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–æ–ª–∏
"""

import logging
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from db.users import fetch_user_by_user_id, get_user_role, update_user_role
from bot.core.auth_user.utils import get_available_roles

AVAILABLE_ROLES = get_available_roles()


logger = logging.getLogger(__name__)
AVAILABLE_ROLES = get_available_roles()


async def handle_user_role_change_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–æ–ª–∏ –¥–ª—è —Å–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç CallbackQuery.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram.
    """
    query = update.callback_query
    await query.answer()

    try:
        parts = query.data.split("_")
        if len(parts) < 4:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data")

        current_role = "_".join(parts[2:-1])
        user_id = int(parts[-1])

        if current_role == "preauth":
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")
            return

        user = fetch_user_by_user_id(user_id)
        if not user:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        user_id, username, phone = user

        text = (
            f"üßæ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n"
            f"‚Ä¢ @{username or '–±–µ–∑ username'}\n"
            f"‚Ä¢ <b>ID:</b> {user_id}\n"
            f"‚Ä¢ <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
            f"‚Ä¢ <b>–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å:</b> <code>{current_role}</code>\n\n"
            f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å:</b>"
        )

        keyboard = [
            [InlineKeyboardButton(f"üîÅ {new_role}", callback_data=f"change_role_{user_id}_{new_role}")]
            for new_role in AVAILABLE_ROLES if new_role != current_role
        ]
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_roles")])

        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.HTML
        )

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –≤ handle_user_role_change_request: %s", e, exc_info=True)
        await query.edit_message_text("‚ö† –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.")


async def handle_role_change_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã —Ä–æ–ª–∏: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç CallbackQuery.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram.
    """
    query = update.callback_query
    await query.answer()

    try:
        _, _, user_id_str, new_role = query.data.split("_", 3)
        user_id = int(user_id_str)

        user = fetch_user_by_user_id(user_id)
        if not user:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        user_id, username, phone = user
        current_role = get_user_role(user_id)

        text = (
            f"‚ö† –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username or '–±–µ–∑ username'} "
            f"—Å <code>{current_role}</code> –Ω–∞ <code>{new_role}</code>?\n\n"
            f"–ù–æ–º–µ—Ä: <code>{phone}</code>"
        )

        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, –∏–∑–º–µ–Ω–∏—Ç—å", callback_data=f"confirm_change_{user_id}_{new_role}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="back_to_roles")],
        ]

        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.HTML
        )

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –≤ handle_role_change_confirmation: %s", e, exc_info=True)
        await query.edit_message_text("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


async def handle_confirm_role_change(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–æ–≤—É—é —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç CallbackQuery.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram.
    """
    query = update.callback_query
    await query.answer()

    try:
        _, _, user_id_str, new_role = query.data.split("_", 3)
        user_id = int(user_id_str)

        success = await update_user_role(user_id=user_id, new_role=new_role)

        if success:
            await query.edit_message_text(
                text=f"‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ <code>{new_role}</code>.",
                parse_mode=ParseMode.HTML
            )
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–π —Ä–æ–ª–∏: %s", e, exc_info=True)
        await query.edit_message_text("‚ö† –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏.")
