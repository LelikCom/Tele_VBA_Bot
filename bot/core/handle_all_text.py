"""
handlers.py

–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:
- –û—Ç–≤–µ—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –æ—Ç–∑—ã–≤—ã.
- –û–±—Ä–∞–±–æ—Ç–∫–∞ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ (–º–∞–∫—Ä–æ—Å—ã, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö).
- –û—Ç–ø—Ä–∞–≤–∫–∞ —à—É—Ç–∫–∏ –¥–Ω—è –∏ –æ–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.
"""

import logging
from telegram import Update, InputFile
from telegram.constants import ParseMode
from telegram.ext import ContextTypes
import psycopg2

from db.feedback import fetch_feedback_by_id
from db.admins import execute_custom_sql_query, df_to_excel_bytes
from bot.feedback.router import feedback_router
from macro.filter_rows.handler import process_filter_rows_scenario
from macro.convert_to_num.handler import process_convert_column_scenario
from bot.core.utils.admin_utils import is_admin
from bot.core.handlers_admin.broadcast import handle_broadcast_datetime, handle_broadcast_whats_new


async def handle_all_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π Telegram.
    –ü–æ–æ—á–µ—Ä–µ–¥–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç:
    - –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –æ—Ç–∑—ã–≤
    - SQL-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç –∞–¥–º–∏–Ω–æ–≤
    - –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ (–º–∞–∫—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å, —Ä–∞—Å—Å—ã–ª–∫–∞)
    - –®—É—Ç–∫–∏ –∏ fallback –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        None: –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    user_data = context.user_data
    state = user_data.get("state")
    macro_step = user_data.get("macro_step")
    user_id = update.effective_user.id

    logging.info(f"[ROUTER] user_id={user_id} | state={state}, macro_step={macro_step}")

    if "reply_feedback" in user_data:
        data = user_data.pop("reply_feedback")
        target_user_id = data["user_id"]
        reply_text = update.message.text

        theme_text = ""
        fid = data.get("fid")
        if fid:
            row = fetch_feedback_by_id(fid)
            if row:
                theme = row[2] or "(–Ω–µ —É–∫–∞–∑–∞–Ω–∞)"
                theme_text = f"üìù –¢–µ–º–∞: {theme}\n\n"

        final_message = f"{theme_text}–û—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{reply_text}"

        try:
            await context.bot.send_message(chat_id=target_user_id, text=final_message)
            await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        return

    if state == "sql:waiting_query":
        if not is_admin(user_id):
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ SQL.")
            return

        query_text = update.message.text.strip()
        table_name = user_data.get("sql_table")
        if table_name and "table" in query_text.lower():
            query_text = query_text.replace("table", table_name)

        try:
            df = execute_custom_sql_query(query_text)
        except psycopg2.Error as e:
            msg = e.pgerror or str(e)
            return await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ SQL:\n<code>{msg.strip()}</code>", parse_mode=ParseMode.HTML
            )
        except Exception as e:
            return await update.message.reply_text(
                f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:\n<code>{str(e)}</code>", parse_mode=ParseMode.HTML
            )

        if df.empty:
            return await update.message.reply_text("‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç.")

        if len(df) <= 10 and df.shape[1] <= 5:
            text = df.to_string(index=False)
            await update.message.reply_text(f"‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω:\n<pre>{text}</pre>", parse_mode=ParseMode.HTML)
        else:
            excel_buf = df_to_excel_bytes(df)
            await update.message.reply_document(
                document=InputFile(excel_buf, "result.xlsx"),
                caption="üìé –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ (Excel)"
            )

        user_data.pop("state", None)
        user_data.pop("sql_table", None)
        return

    if update.message and update.message.text:
        text = update.message.text.strip().lower()
        if user_data.get("joke_waiting") and text in {"–∫—Ç–æ —Ç–∞–º", "–∫—Ç–æ —Ç–∞–º?"}:
            user_data["joke_waiting"] = False
            await update.message.reply_text("Aiogram.")
            return

    if state == "broadcast:datetime":
        await handle_broadcast_datetime(update, context)
        return

    if state == "broadcast:whats_new":
        await handle_broadcast_whats_new(update, context)
        return

    if state and state.startswith("feedback:"):
        logging.debug("[ROUTER] –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ feedback_router")
        await feedback_router(update, context)
        return

    filter_steps = {
        "ask_column", "process_column", "ask_mode", "wait_for_mode",
        "ask_manual_values", "process_manual_values", "ask_sheet_range",
        "process_range_input", "ask_sheet_name", "process_sheet_name",
        "confirm_macro", "show_instruction"
    }

    if macro_step in filter_steps:
        logging.debug("[ROUTER] –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ process_filter_rows_scenario")
        await process_filter_rows_scenario(update, context)
        return

    convert_steps = {"ask_column", "ask_column_waiting", "ask_start_cell"}
    if macro_step in convert_steps:
        logging.debug("[ROUTER] –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ process_convert_column_scenario")
        await process_convert_column_scenario(update, context)
        return

    logging.info("[ROUTER] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è ‚Äî –æ—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    if update.message:
        await update.message.reply_text("‚ùì –Ø –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–ø—Ä–æ–±—É–π /start.")
