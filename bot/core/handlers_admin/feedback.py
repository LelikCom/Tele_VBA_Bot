"""
feedback.py

–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ –∞–¥–º–∏–Ω–∫–µ:
- –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
- –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞
- –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
- –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –æ—Ç–∑—ã–≤–æ–≤
"""

import logging
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from db.feedback import (
    fetch_unread_feedback,
    fetch_feedback_by_id,
    mark_feedback_as_read,
)


async def show_feedback_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ (5 —à—Ç—É–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É).

    Args:
        update (Update): Callback –æ—Ç Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    query = update.callback_query
    await query.answer()

    offset = context.user_data.get("feedback_offset", 0)
    rows = await fetch_unread_feedback(limit=5, offset=offset)

    if not rows:
        await query.message.edit_text("‚úÖ –ë–æ–ª—å—à–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç.")
        return

    keyboard = []
    for row in rows:
        fid, _, theme, _, _, att_type, _ = row
        label = f"{theme or '–ë–µ–∑ —Ç–µ–º—ã'} ‚Äî {att_type or '—Ç–µ–∫—Å—Ç'}"
        keyboard.append([InlineKeyboardButton(f"üì¨ {label}", callback_data=f"show_feedback_{fid}")])

    keyboard.append([InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="feedback_next")])

    await query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∑—ã–≤:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def handle_feedback_next(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.

    Args:
        update (Update): Callback –æ—Ç Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    query = update.callback_query
    await query.answer()

    current_offset = context.user_data.get("feedback_offset", 0)
    context.user_data["feedback_offset"] = current_offset + 5
    await show_feedback_list(update, context)


async def show_feedback_item(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–∑—ã–≤ (—Ç–µ–∫—Å—Ç + –≤–ª–æ–∂–µ–Ω–∏–µ) –ø–æ –µ–≥–æ ID.

    Args:
        update (Update): Callback –æ—Ç Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    query = update.callback_query
    await query.answer()

    try:
        fid = int(query.data.replace("show_feedback_", ""))
    except ValueError:
        await query.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ—Ç–∑—ã–≤–∞.")
        return

    row = await fetch_feedback_by_id(fid)
    if not row:
        await query.message.reply_text("‚ùå –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–Ω.")
        return

    fid, user_id, theme, message, attachment, att_type, created_at = row

    text_parts = [
        f"<b>üì® –û—Ç–∑—ã–≤ –æ—Ç {user_id}</b>",
        f"<i>{created_at.strftime('%Y-%m-%d %H:%M')}</i>",
    ]
    if theme:
        text_parts.append(f"<b>–¢–µ–º–∞:</b> {theme}")
    if message:
        text_parts.append(f"\n{message}")
    full_text = "\n".join(text_parts)

    try:
        if attachment and att_type == "photo":
            await query.message.reply_photo(photo=attachment, caption=full_text, parse_mode=ParseMode.HTML)
        elif attachment and att_type == "document":
            await query.message.reply_document(document=attachment, caption=full_text, parse_mode=ParseMode.HTML)
        else:
            await query.message.reply_text(full_text, parse_mode=ParseMode.HTML)
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}")
        await query.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

    mark_feedback_as_read(fid)

    # –ö–Ω–æ–ø–∫–∞ "–û—Ç–≤–µ—Ç–∏—Ç—å"
    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"reply_feedback_{fid}_{user_id}")]
    ])
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)


async def handle_feedback_reply_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–∑—ã–≤. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –∏ –æ–∂–∏–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –∞–¥–º–∏–Ω–∞.

    Args:
        update (Update): Callback –æ—Ç Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    query = update.callback_query
    await query.answer()

    try:
        parts = query.data.split("_")
        fid = int(parts[2])
        user_id = int(parts[3])

        context.user_data["reply_feedback"] = {
            "fid": fid,
            "user_id": user_id
        }

        await query.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ reply_feedback: {e}")
        await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤.")
