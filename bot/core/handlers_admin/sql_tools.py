"""
sql_tools.py

–ú–æ–¥—É–ª—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤:
- –í—ã–±–æ—Ä —Ç–∞–±–ª–∏—Ü—ã
- –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
- –ü–æ–∫–∞–∑ –ø–æ–ª–µ–π —Ç–∞–±–ª–∏—Ü—ã
- –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
"""

import textwrap
import logging
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputFile,
)
from telegram.constants import ParseMode
from telegram.ext import ContextTypes
from os import getenv
from dotenv import load_dotenv

from db.users import get_user_role
from db.admins import (
    get_all_table_names,
    get_table_columns,
    execute_custom_sql_query,
    df_to_excel_bytes,
)
from bot.core.utils.sql_utils import reply_with_log
from log_dialog.models_daig import Point


load_dotenv()
ADMIN_CHAT_ID = int(getenv("ADMIN_CHAT_ID", "0"))

async def handle_sql_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ SQL-—Ä–∞–∑–¥–µ–ª. –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç.
    """
    user_id = update.effective_user.id
    user_role = await get_user_role(user_id)

    if user_role != "admin":
        return await reply_with_log(
            update,
            context,
            "üîß –†–∞–∑–¥–µ–ª SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º",
            point=Point.SQL,
        )

    context.user_data.clear()
    context.user_data["state"] = "sql:choose_table"

    table_names = await get_all_table_names(user_id)
    if not table_names:
        return await update.effective_message.reply_text("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

    keyboard = InlineKeyboardMarkup([[
        InlineKeyboardButton(table, callback_data=f"sql_table_{table}")
        ] for table in table_names])

    await update.effective_message.reply_text(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤:",
        reply_markup=keyboard
    )


async def handle_sql_table_select(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –µ—ë –ø–æ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç.
    """
    query = update.callback_query
    await query.answer()

    table = query.data.replace("sql_table_", "")
    context.user_data["sql_table"] = table
    context.user_data["state"] = "sql:waiting_query"

    try:
        columns = await get_table_columns(table)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã '{table}': {e}")
        return await query.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã:\n{e}")

    if not columns:
        return await query.message.reply_text("‚ö†Ô∏è –£ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç –≤–∏–¥–∏–º—ã—Ö –ø–æ–ª–µ–π.")

    field_list = "\n".join([f"‚Ä¢ <code>{name}</code>: <i>{dtype}</i>" for name, dtype in columns])

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì• –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (ALL)", callback_data=f"sql_all_{table}")],
        [InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π SQL-–∑–∞–ø—Ä–æ—Å", callback_data="sql_custom_query")]
    ])

    await query.message.edit_text(
        f"üìÑ <b>–¢–∞–±–ª–∏—Ü–∞:</b> <code>{table}</code>\n\n"
        f"<b>–ü–æ–ª—è:</b>\n{field_list}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π SQL-–∑–∞–ø—Ä–æ—Å –≤—Ä—É—á–Ω—É—é.",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )


async def handle_sql_all_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç SELECT * FROM table –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞–∫ —Ç–µ–∫—Å—Ç –∏–ª–∏ Excel-—Ñ–∞–π–ª.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç.
    """
    query = update.callback_query
    await query.answer()

    table = query.data.replace("sql_all_", "")
    sql = f"SELECT * FROM {table}"

    try:
        df = await execute_custom_sql_query(sql, user_id=ADMIN_CHAT_ID)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL-–∑–∞–ø—Ä–æ—Å–∞: {e}")
        return await query.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:\n<code>{e}</code>",
            parse_mode=ParseMode.HTML
        )

    if df.empty:
        return await query.message.reply_text("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.")

    # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –º–∞–ª–µ–Ω—å–∫–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    if len(df) <= 10 and df.shape[1] <= 5:
        text = df.to_string(index=False)
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
        max_length = 4096
        if len(text) > max_length:
            text = textwrap.fill(text, max_length)  # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π

        return await query.message.reply_text(
            f"üì• –†–µ–∑—É–ª—å—Ç–∞—Ç:\n<pre>{text}</pre>",
            parse_mode=ParseMode.HTML
        )

    # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –±–æ–ª—å—à–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel
    excel_buf = df_to_excel_bytes(df)
    await query.message.reply_document(
        document=InputFile(excel_buf, f"{table}.xlsx"),
        caption=f"üìé –í—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã <b>{table}</b>",
        parse_mode=ParseMode.HTML
    )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.pop("state", None)
    context.user_data.pop("sql_table", None)
