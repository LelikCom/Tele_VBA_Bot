"""
broadcast.py

–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
- –í—ã–±–æ—Ä —Ä–æ–ª–∏
- –í–≤–æ–¥ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏
- –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ñ–æ—Ç–æ
- –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
- –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import logging
from datetime import datetime
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import ContextTypes

from db.users import get_users_by_role, get_all_roles_from_db
from bot.core.utils.admin_utils import is_admin, reset_all_user_state


async def admin_broadcast_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ä–∞—Å—Å—ã–ª–∫—É. –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = update.effective_user.id
    if not await is_admin(user_id):
        await update.callback_query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    await update.callback_query.answer()
    reset_all_user_state(context)
    context.user_data["state"] = "broadcast:choose_role"

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="broadcast_role_auth")],
        [InlineKeyboardButton("üõ† –ê–¥–º–∏–Ω–∞–º", callback_data="broadcast_role_admin")],
        [InlineKeyboardButton("üë§ –í—Å–µ–º", callback_data="broadcast_role_all")],
    ])

    await update.callback_query.message.edit_text(
        "üë• –ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?",
        reply_markup=keyboard
    )


async def handle_broadcast_choose_role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–æ–ª–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É/–≤—Ä–µ–º—è.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    query = update.callback_query
    await query.answer()
    role_code = query.data.replace("broadcast_role_", "")
    context.user_data["broadcast_target_role"] = role_code
    context.user_data["state"] = "broadcast:datetime"

    await query.message.edit_text(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n`12.04.2025 20:00`",
        parse_mode="Markdown"
    )


async def handle_broadcast_datetime(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    text = update.message.text.strip()

    if text.lower() in ["–æ—Ç–º–µ–Ω–∞", "/cancel"]:
        context.user_data.clear()
        await update.message.reply_text("üö´ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    try:
        dt = datetime.strptime(text, "%d.%m.%Y %H:%M")
        context.user_data["broadcast_datetime"] = dt.strftime("%d.%m.%Y %H:%M")
    except ValueError:
        await update.message.reply_text(
            "‚ùó –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–µ–≤–µ—Ä–µ–Ω. –£–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `12.04.2025 20:00`",
            parse_mode="Markdown"
        )
        return

    context.user_data["state"] = "broadcast:whats_new"

    await update.message.reply_text(
        "üìå –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ ¬´–ß—Ç–æ –Ω–æ–≤–æ–≥–æ¬ª.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ ‚¨áÔ∏è"
    )


async def send_broadcast_preview(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.

    –í–∫–ª—é—á–∞–µ—Ç –¥–∞—Ç—É, –±–ª–æ–∫ "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ", –∞–≤—Ç–æ—Ä–∞ –∏ (–µ—Å–ª–∏ –µ—Å—Ç—å) —Ñ–æ—Ç–æ.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∏ —Å–æ–æ–±—â–µ–Ω–∏–∏.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.

    Returns:
        None: –§—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç, –Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    chat_id = update.effective_chat.id

    dt = context.user_data.get("broadcast_datetime", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    whats_new = context.user_data.get("broadcast_whats_new", {})
    author = context.user_data.get("broadcast_author", "‚Äî")

    text_block = whats_new.get("text", "")
    photo_id = whats_new.get("photo_file_id")

    preview_text = (
        f"üì¢ <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
        f"<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</b> {dt}\n\n"
        f"<b>–ß—Ç–æ –Ω–æ–≤–æ–≥–æ:</b>\n{text_block}\n\n"
        f"<b>–û–ø—É–±–ª–∏–∫–æ–≤–∞–ª:</b> {author}"
    )

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –†–∞–∑–æ—Å–ª–∞—Ç—å", callback_data="broadcast_confirm")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel")]
    ])

    if photo_id:
        msg = await context.bot.send_photo(
            chat_id=chat_id,
            photo=photo_id,
            caption=preview_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    else:
        msg = await context.bot.send_message(
            chat_id=chat_id,
            text=preview_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    context.user_data["last_bot_message_id"] = msg.message_id


async def handle_broadcast_whats_new(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é (—á—Ç–æ –Ω–æ–≤–æ–≥–æ).

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    message = update.message

    if message.text and message.text.lower() in ["–æ—Ç–º–µ–Ω–∞", "/cancel"]:
        context.user_data.clear()
        await message.reply_text("üö´ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    if message.photo:
        photo_id = message.photo[-1].file_id
        caption = message.caption or ""
        context.user_data["broadcast_whats_new"] = {
            "photo_file_id": photo_id,
            "text": caption,
        }
    elif message.text:
        context.user_data["broadcast_whats_new"] = {
            "photo_file_id": None,
            "text": message.text,
        }
    else:
        await message.reply_text("‚ùó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é.")
        return

    context.user_data["broadcast_author"] = "https://t.me/AIchetovkin"
    context.user_data["state"] = "broadcast:confirm"

    await send_broadcast_preview(update, context)


async def handle_broadcast_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É —Ä–∞—Å—Å—ã–ª–∫–∏ (–ø–æ –∫–Ω–æ–ø–∫–µ "‚ùå –û—Ç–º–µ–Ω–∞").

    Args:
        update (Update): –û–±—ä–µ–∫—Ç Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç.
    """
    print("[DEBUG] –ö–Ω–æ–ø–∫–∞ –û–¢–ú–ï–ù–ê ‚Äî –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ handle_broadcast_cancel")
    await update.callback_query.answer()
    context.user_data.clear()

    try:
        if update.callback_query.message.photo:
            await update.callback_query.message.edit_caption("üö´ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        else:
            await update.callback_query.message.edit_text("üö´ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")


async def handle_broadcast_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª–∏.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç.
    """
    logging.info("[DEBUG] –ö–Ω–æ–ø–∫–∞ –†–ê–°–°–´–õ–ö–ê ‚Äî –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ handle_broadcast_confirm")
    query = update.callback_query
    await query.answer()

    dt = context.user_data.get("broadcast_datetime", "‚Äî")
    whats_new = context.user_data.get("broadcast_whats_new", {})
    author = context.user_data.get("broadcast_author", "‚Äî")
    text_block = whats_new.get("text", "")
    photo_id = whats_new.get("photo_file_id")
    target_role = context.user_data.get("broadcast_target_role", "auth")

    final_text = (
        f"<b>üì¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ</b>\n\n"
        f"<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {dt}\n\n"
        f"<b>–ß—Ç–æ –Ω–æ–≤–æ–≥–æ:</b>\n{text_block}\n\n"
        f"<b>–û–ø—É–±–ª–∏–∫–æ–≤–∞–ª:</b> {author}"
    )

    if target_role == "all":
        roles = await get_all_roles_from_db()
        user_ids = []
        for role in roles:
            await user_ids.extend(get_users_by_role(role))
        user_ids = list(set(user_ids))
    else:
        user_ids = await get_users_by_role(target_role)

    success, failed = 0, 0
    for user_id in user_ids:
        try:
            if photo_id:
                await context.bot.send_photo(
                    chat_id=user_id,
                    photo=photo_id,
                    caption=final_text,
                    parse_mode="HTML"
                )
            else:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=final_text,
                    parse_mode="HTML"
                )
            success += 1
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            failed += 1

    confirm_text = (
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"–£—Å–ø–µ—à–Ω–æ: {success} ‚úÖ\n–ù–µ —É–¥–∞–ª–æ—Å—å: {failed} ‚ùå"
    )

    try:
        if query.message.photo:
            await query.message.edit_caption(confirm_text)
        else:
            await query.message.edit_text(confirm_text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏: {e}")

    context.user_data.clear()
