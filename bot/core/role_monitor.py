"""
role_monitor.py

–§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–µ–π:
- –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã Telegram
- –û—á–∏—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ —É –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import asyncio
import functools
import logging
from telegram import BotCommand, BotCommandScopeChat

from db.users import get_all_user_roles
from db.logs import get_bot_messages_for_user, delete_bot_messages_for_user

# –ö—ç—à–∏
roles_cache = {}
menu_messages = {}
user_messages = {}


async def role_monitor(bot):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–æ–ª–µ–π.
    –ü—Ä–∏ —Å–º–µ–Ω–µ —Ä–æ–ª–∏ –Ω–∞ 'rejected' —É–¥–∞–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞.
    """
    logging.info("üéØ –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

    roles_and_commands = {
        "admin": [
            BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand("get_users", "–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
        ],
        "auth": [BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")],
        "preauth": [BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")],
        "noauth": [BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")],
        "rejected": []
    }

    while True:
        try:
            users = get_all_user_roles()

            for user_id, role in users:
                prev_role = roles_cache.get(user_id)

                if role != prev_role:
                    roles_cache[user_id] = role
                    scope = BotCommandScopeChat(user_id)
                    commands = roles_and_commands.get(role, [BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")])

                    try:
                        await bot.set_my_commands(commands=commands, scope=scope)
                    except Exception as e:
                        logging.warning(f"[MONITOR] –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è {user_id}: {e}")
                        continue

                    if role == "rejected":
                        # üßπ –£–¥–∞–ª–µ–Ω–∏–µ inline-–º–µ–Ω—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
                        msg_id = menu_messages.pop(user_id, None)
                        if msg_id:
                            try:
                                await bot.delete_message(chat_id=user_id, message_id=msg_id)
                            except Exception as e:
                                logging.warning(f"[MONITOR] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è inline-–º–µ–Ω—é {msg_id} –¥–ª—è {user_id}: {e}")

                        # üßπ –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞ (–∏–∑ dialog_log + Telegram)
                        try:
                            loop = asyncio.get_running_loop()
                            get_msgs = functools.partial(get_bot_messages_for_user, user_id)
                            bot_messages = await loop.run_in_executor(None, get_msgs)

                            for msg_id in bot_messages:
                                try:
                                    await bot.delete_message(chat_id=user_id, message_id=msg_id)
                                except Exception as e:
                                    logging.warning(
                                        f"[MONITOR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id} –¥–ª—è {user_id}: {e}")
                        except Exception as e:
                            logging.error(f"[MONITOR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –∏–∑ –ë–î: {e}")

                        # üßπ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∏–∑ dialog_log
                        try:
                            delete_bot_messages_for_user(user_id)
                            logging.info(f"[MONITOR] –£–¥–∞–ª–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –∏–∑ –ë–î –¥–ª—è {user_id}")
                        except Exception as e:
                            logging.error(f"[MONITOR] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ë–î —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞: {e}")

                        # üßº –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
                        user_messages.pop(user_id, None)

        except Exception as e:
            logging.critical(f"[MONITOR] –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)

        await asyncio.sleep(10)
