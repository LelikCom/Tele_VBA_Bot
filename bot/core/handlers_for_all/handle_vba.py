"""
handlers.py

–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:
- –í—ã–±–æ—Ä —Ñ–æ—Ä–º—É–ª –∏ –º–∞–∫—Ä–æ—Å–æ–≤
- –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ñ–æ—Ä–º–∞–º –∏ –º–∞–∫—Ä–æ—Å–∞–º
- –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ä–æ–ª—è–º)
- –û—Ç–ø—Ä–∞–≤–∫–∞ —à—É—Ç–∫–∏ –¥–Ω—è
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –æ—Ç–∫–∞–∑ –æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
"""

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from macro.utils import (
    escape_markdown,
    format_comment_bold_before_dash,
)
from db.macros import (
    fetch_all_formul_macros,
    fetch_all_macros,
    fetch_formula_by_name,
)
from db.users import (
    save_user,
    get_user_role,
    get_users_by_role,
    fetch_users_by_role,
)
from bot.core.utils.sql_utils import reply_with_log
from log_dialog.handlers_diag import log_step
from log_dialog.models_daig import Point
from bot.core.keyboards.main_menu import get_main_menu_keyboard
from macro.macros_logic import (
    run_macro_scenario,
    show_instruction_options,
)


@log_step(question_point=Point.SCENARIO, answer_text_getter=lambda msg: msg.text)
async def handle_formulas(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞ "–§–æ—Ä–º—É–ª—ã" –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç Telegram-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.

    Returns:
        Message: –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
    """

    formulas = await fetch_all_formul_macros()

    buttons = [[InlineKeyboardButton(name, callback_data=f"formula:{name}")] for _, name, _, _ in formulas]
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])

    if update.callback_query:
        return await update.callback_query.edit_message_text(
            "üìö –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ñ–æ—Ä–º—É–ª—É:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    else:
        return await update.message.reply_text(
            "üìö –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ñ–æ—Ä–º—É–ª—É:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )


@log_step(question_point=Point.SCENARIO, answer_text_getter=lambda msg: msg.text)
async def handle_macros(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞ "–ú–∞–∫—Ä–æ—Å—ã" –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.

    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞–∫—Ä–æ—Å—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
    –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∏—Ö, –≤–∫–ª—é—á–∞—è –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç Telegram-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.

    Returns:
        Message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª callback.
    """
    macros = await fetch_all_macros()
    buttons = [[InlineKeyboardButton(name, callback_data=f"macro:{name}")] for _, name, _ in macros]
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])

    if update.callback_query:
        return await update.callback_query.edit_message_text(
            "‚öôÔ∏è –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –º–∞–∫—Ä–æ—Å:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    else:
        return await update.message.reply_text(
            "‚öôÔ∏è –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –º–∞–∫—Ä–æ—Å:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )


@log_step(question_point=Point.CONFIRM, answer_text_getter=lambda msg: msg.text)
async def handle_instruction_yes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Message:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ñ–æ—Ä–º—É–ª—ã –∏–ª–∏ –º–∞–∫—Ä–æ—Å–∞
    –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä VBA Excel, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç Telegram-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π callback-–∑–∞–ø—Ä–æ—Å.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ—Ç–æ–º.

    Returns:
        Message: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
    """
    query = update.callback_query
    instruction_type = context.user_data.get("instruction_type", "macro")
    name = context.user_data.get(f"current_{instruction_type}_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    name_escaped = escape_markdown(name)

    instructions = {
        "formula": (
            f"‚ûó –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ {name_escaped}\n\n"
            "1. –û—Ç–∫—Ä–æ–π —Ä–µ–¥–∞–∫—Ç–æ—Ä VBA –≤ Excel (Alt+F11)\n"
            "2. –°–æ–∑–¥–∞–π –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å: 'Insert' - 'Module'\n"
            "3. –í—Å—Ç–∞–≤—å –∫–æ–¥ —Ñ–æ—Ä–º—É–ª—ã –≤ –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –æ–∫–Ω–µ\n"
            "*–ö–æ–¥ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –∫–æ–ø–∏—Ä—É–π —Å —Ä—É—Å—Å–∫–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–æ–π*\n"
            f"4. –ò—Å–ø–æ–ª—å–∑—É–π –≤ —è—á–µ–π–∫–∞—Ö –∫–∞–∫ ={name_escaped}(...)\n"
            "5. –ù–µ –∑–∞–±—É–¥—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ *.xlsm*"
        ),
        "macro": (
            f"‚öôÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –º–∞–∫—Ä–æ—Å—É {name_escaped}\n\n"
            "1. –û—Ç–∫—Ä–æ–π —Ä–µ–¥–∞–∫—Ç–æ—Ä VBA –≤ Excel (Alt+F11)\n"
            "2. –°–æ–∑–¥–∞–π –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å: 'Insert' - 'Module'\n"
            "3. –í—Å—Ç–∞–≤—å –∫–æ–¥ –º–∞–∫—Ä–æ—Å–∞ –≤ –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –æ–∫–Ω–µ\n"
            "*–ö–æ–¥ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –∫–æ–ø–∏—Ä—É–π —Å —Ä—É—Å—Å–∫–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–æ–π*\n"
            "4. –ó–∞–ø—É—Å—Ç–∏ –º–∞–∫—Ä–æ—Å (F5)\n"
            "5. –ù–µ –∑–∞–±—É–¥—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ *.xlsm*"
        )
    }

    user_id = update.effective_user.id
    user_role = await get_user_role(user_id)
    return await query.message.reply_text(
        text=instructions[instruction_type],
        parse_mode="Markdown",
        reply_markup=get_main_menu_keyboard(user_role)
    )


@log_step(question_point=Point.CONFIRM, answer_text_getter=lambda msg: msg.text)
async def handle_instruction_no(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Message:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –ø–æ–∫–∞–∑–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–∞–∫—Ä–æ—Å–∞ –∏–ª–∏ —Ñ–æ—Ä–º—É–ª—ã.

    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ (–Ω–∞ —Å–ª—É—á–∞–π –Ω–æ–≤—ã—Ö) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    –≤ –≤–∏–¥–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        Message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é.
    """
    user_id = update.effective_user.id
    username = update.effective_user.username

    # üîÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await save_user(user_id, username)
    user_role = await get_user_role(user_id)

    # üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    return await update.callback_query.message.reply_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_menu_keyboard(user_role)
    )


@log_step(question_point=Point.MAIN_MENU, answer_text_getter=lambda msg: msg.text)
async def handle_back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Message:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".

    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É, –æ—á–∏—â–∞–µ—Ç `user_data` –∏ –∑–∞–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram (–æ–∂–∏–¥–∞–µ—Ç—Å—è CallbackQuery).
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        Message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é.
    """
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    username = update.effective_user.username

    # üîÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await save_user(user_id, username)
    user_role = await get_user_role(user_id)

    # üßπ –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()

    # üè† –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    return await query.message.edit_text(
        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard(user_role)
    )


@log_step(question_point=Point.CONFIRM, answer_text_getter=lambda msg: msg.text)
async def handle_filter_role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Message:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–æ–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö (–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏).

    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç –¥–æ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ–ª—å—à–µ 5, –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë".

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram (CallbackQuery —Å filter_role_).
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        Message: –û–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏.
    """
    query = update.callback_query
    await query.answer()

    data = query.data
    if not data.startswith("filter_role_"):
        return

    # üì• –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª–∏
    selected_role = data.replace("filter_role_", "")
    users = await fetch_users_by_role(selected_role)

    # üîò –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
    buttons = []

    if not users:
        text = f"‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é `{selected_role}`."
    else:
        text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–æ–ª—å—é `{selected_role}`:"
        shown_users = users[:5]
        for tg_id, username, phone in shown_users:
            btn_text = f"@{username or '–±–µ–∑ username'} | {phone}"
            callback_data = f"user_select_{selected_role}_{tg_id}"
            buttons.append([InlineKeyboardButton(btn_text, callback_data=callback_data)])

        # üîÑ –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë", –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        if len(users) > 5:
            buttons.append([
                InlineKeyboardButton("üì• –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë", callback_data=f"show_more_{selected_role}_5")
            ])

    # ‚¨ÖÔ∏è –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_roles")])

    return await query.edit_message_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode=ParseMode.MARKDOWN
    )


@log_step(question_point=Point.CONFIRM, answer_text_getter=lambda msg: msg.text)
async def handle_show_more_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Message:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë" –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª–∏.

    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –ø–æ—Ä—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ 5 —à—Ç—É–∫) —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º.
    –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ –µ—â—ë –∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥".

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram (CallbackQuery).
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram.

    Returns:
        Message: –û–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
    """
    query = update.callback_query
    await query.answer()

    try:
        # üîπ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –∏ —Å–º–µ—â–µ–Ω–∏—è
        parts = query.data.split("_")
        if len(parts) < 4:
            raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {query.data}")

        role = parts[2]
        offset = int(parts[-1])

    except Exception as e:
        return await query.edit_message_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {e}")

    # üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ—Ä—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await get_users_by_role(role, limit=5, offset=offset)
    if not users:
        return await query.edit_message_text(
            f"üì≠ –ë–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é `{role}`.",
            parse_mode=ParseMode.MARKDOWN
        )

    # üîò –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    buttons = []
    for tg_id, username, phone in users:
        btn_text = f"@{username or '–±–µ–∑ username'} | {phone}"
        callback_data = f"user_select_{role}_{tg_id}"
        buttons.append([InlineKeyboardButton(btn_text, callback_data=callback_data)])

    # ‚ûï –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë", –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    next_offset = offset + 5
    more_users = await get_users_by_role(role, limit=1, offset=next_offset)
    if more_users:
        buttons.append([
            InlineKeyboardButton("üì• –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë", callback_data=f"show_more_{role}_{next_offset}")
        ])

    # ‚¨ÖÔ∏è –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_roles")])

    text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–æ–ª—å—é `{role}` (—Å {offset + 1}):"
    return await query.edit_message_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode=ParseMode.MARKDOWN
    )


@log_step(question_point=Point.SCENARIO, answer_text_getter=lambda msg: msg.text)
async def handle_macro_detail(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–∞–∫—Ä–æ—Å–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.

    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞–∫—Ä–æ—Å–∞ –≤ user_data, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —à–∞–≥–∞ "–≤—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–∞",
    –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –º–∞–∫—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–æ–¥—É–ª—å.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram (CallbackQuery).
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram.

    Returns:
        Message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—á–∞–ª–æ–º —Å—Ü–µ–Ω–∞—Ä–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞–∫—Ä–æ—Å–∞.
    """
    query = update.callback_query
    macro_name = query.data.split(":", 1)[1]

    # üß† –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–∫—Ä–æ—Å –∏ –≤–æ–∑–º–æ–∂–Ω—ã–π –Ω–∞—á–∞–ª—å–Ω—ã–π —à–∞–≥
    context.user_data.update({
        "instruction_type": "macro",
        "current_macro_name": macro_name,
        "macro_step": "ask_column" if macro_name in [
            "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å_—Å—Ç–æ–ª–±–µ—Ü_–≤_—á–∏—Å–ª–æ",
            "–§–∏–ª—å—Ç—Ä_–°—Ç—Ä–æ–∫–∏"
        ] else None
    })

    # ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è –º–∞–∫—Ä–æ—Å–∞
    return await run_macro_scenario(update, context)


@log_step(question_point=Point.ERROR, answer_text_getter=lambda msg: msg.text)
async def handle_formula_detail(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Message:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–æ—Ä–º—É–ª—ã –∏–∑ —Å–ø–∏—Å–∫–∞.

    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—É–ª–µ –∏–∑ –ë–î –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–¥ —Ñ–æ—Ä–º—É–ª—ã
    —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º (–µ—Å–ª–∏ –µ—Å—Ç—å), –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown. –¢–∞–∫–∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram (CallbackQuery).
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram.

    Returns:
        Message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º —Ñ–æ—Ä–º—É–ª—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.
    """
    query = update.callback_query
    formula_name = query.data.split(":", 1)[1]
    formula_data = await fetch_formula_by_name(formula_name)

    if not formula_data:
        return await query.message.reply_text("üîç –§–æ—Ä–º—É–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    _, name, code, comment = formula_data

    response_text = f"*{name}*\n\n```vb\n{code}\n```"

    if comment:
        formatted_comment = format_comment_bold_before_dash(comment)
        response_text += f"\n\nüìù *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:*\n{formatted_comment}"

    msg = await query.message.reply_text(
        text=response_text,
        parse_mode=ParseMode.MARKDOWN
    )

    context.user_data.update({
        "instruction_type": "formula",
        "current_formula_name": name
    })

    await show_instruction_options(update, context)
    return msg


@log_step(question_point=Point.JOKE, answer_text_getter=lambda _: "üé≠ –®—É—Ç–∫–∞ –¥–Ω—è: –¢—É–∫ —Ç—É–∫")
async def handle_joke_of_the_day(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —à—É—Ç–∫—É –¥–Ω—è.

    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —à—É—Ç–∫–∏ –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –±–æ—Ç–∞.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –µ–≥–æ –∑–∞–ø—Ä–æ—Å–µ.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.

    Returns:
        None: –§—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç, –Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —à—É—Ç–∫–æ–π –¥–Ω—è –∏ –ª–æ–≥–∏—Ä—É–µ—Ç —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ.
    """
    context.user_data["joke_waiting"] = True

    await reply_with_log(
        update,
        context,
        "üé≠ –®—É—Ç–∫–∞ –¥–Ω—è:\n–¢—É–∫ —Ç—É–∫",
        point=Point.JOKE
    )
