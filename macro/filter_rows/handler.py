"""
handler.py

–ì–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä —à–∞–≥–æ–≤ —Å—Ü–µ–Ω–∞—Ä–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫.
–í—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞.
"""

import logging
from telegram import Update
from telegram.ext import ContextTypes

from log_dialog.models_daig import Point
from log_dialog.handlers_diag import log_step
from macro.filter_rows import state
from macro.filter_rows.steps import (
    column, mode, range, sheet, confirm
)
from macro.utils import send_response


@log_step(question_point=Point.SCENARIO, answer_text_getter=lambda msg: msg.text if msg.text else "attachment")
async def process_filter_rows_scenario(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.

    Returns:
        Message: –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è).
    """
    if context.user_data.get("state", "").startswith("feedback"):
        print("‚è≠ –ü—Ä–æ–ø—É—Å–∫ —à–∞–≥–∞ –º–∞–∫—Ä–æ—Å–∞ ‚Äî —Å–µ–π—á–∞—Å feedback")
        return

    handlers = {
        "ask_column": column.ask_column,
        "process_column": column.process_column_input,
        "ask_mode": mode.ask_mode,
        "wait_for_mode": mode.handle_mode_selection,
        "ask_manual_values": mode.ask_manual_values,
        "process_manual_values": mode.process_manual_values,
        "ask_sheet_range": range.ask_sheet_range,
        "process_range_input": range.process_range_input,
        "ask_sheet_name": sheet.ask_sheet_name,
        "process_sheet_name": sheet.process_sheet_name,
        "confirm_macro": confirm.confirm_macro,
        "show_instruction": confirm.show_instruction_options,
    }

    step = state.get_step(context.user_data)
    print(f"üß© –¢–µ–∫—É—â–∏–π —à–∞–≥ —Å—Ü–µ–Ω–∞—Ä–∏—è: {step}")

    try:
        if step in handlers:
            return await handlers[step](update, context)
        else:
            return await handle_unknown_step(update, context)
    except Exception as e:
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏: {e}")
        return await handle_scenario_error(update, context)


async def handle_unknown_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —à–∞–≥–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç.

    Returns:
        None
    """
    await send_response(update, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
    context.user_data.clear()


async def handle_scenario_error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç.

    Returns:
        None
    """
    await send_response(update, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    context.user_data.clear()
