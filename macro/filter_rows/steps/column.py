"""
column.py

–®–∞–≥–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: –≤–≤–æ–¥ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–æ–ª–±—Ü–∞.
"""

from telegram import Update
from telegram.ext import ContextTypes

from macro.utils import send_response, parse_column
from macro.filter_rows import state


async def ask_column(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç Telegram –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç.

    Returns:
        None
    """
    await send_response(
        update,
        "üìç–ö–∞–∫–æ–π —Å—Ç–æ–ª–±–µ—Ü –±—É–¥–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å?\n"
        "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ –∏–ª–∏ –±—É–∫–≤—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´1¬ª –∏–ª–∏ ¬´A¬ª.\n"
        "–ï—Å–ª–∏ –±—É–∫–≤–∞ ‚Äî —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∞—è."
    )
    state.set_step(context.user_data, "process_column")


async def process_column_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—Ç–æ–ª–±—Ü–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç Telegram –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç.

    Returns:
        None
    """
    user_input = update.message.text.strip().upper()
    column_num = parse_column(user_input)

    if column_num is None or not (1 <= column_num <= 16384):
        await send_response(
            update,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–ª–±—Ü–∞.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å–∫–ª–∞–¥–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.\n"
            "–ù—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã.\n"
            "–ü—Ä–∏–º–µ—Ä: 1 –∏–ª–∏ A."
        )
        return await ask_column(update, context)

    context.user_data["column_num"] = column_num
    await send_response(update, f"‚úÖ –í—ã–±—Ä–∞–Ω —Å—Ç–æ–ª–±–µ—Ü: {column_num}")
    state.set_step(context.user_data, "ask_mode")

    from macro.filter_rows.steps import mode
    await mode.ask_mode(update, context)
