"""
range.py

–®–∞–≥–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: –∑–∞–ø—Ä–æ—Å –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —è—á–µ–µ–∫.
"""

import logging
from telegram import Update
from telegram.ext import ContextTypes
import re

from macro.filter_rows import state
from macro.utils import (
    send_response,
    validate_cell,
    RANGE_PATTERN,
    split_cell,
    )
from log_dialog.handlers_diag import log_bot_answer
from macro.filter_rows.steps.sheet import ask_sheet_name
from macro.filter_rows.steps.confirm import confirm_macro


async def ask_sheet_range(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω —è—á–µ–µ–∫.

    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —è—á–µ–µ–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –±—É–∫–≤ –∏
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        None: –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥.
    """
    await send_response(
        update,
        "üìç–ò–∑ –∫–∞–∫–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –±—É–¥–µ—à—å –∑–∞–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ?\n"
        "–£–∫–∞–∂–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏.\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ A1:B10\n‚Ä¢ –õ–∏—Å—Ç1!C5:D20"
    )
    state.set_step(context.user_data, "process_range_input")


async def process_range_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —è—á–µ–µ–∫, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º—ã: A1:B2 –∏–ª–∏ –õ–∏—Å—Ç1!A1:B2.

    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ä–º–∞—Ç—É, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —è—á–µ–µ–∫,
    —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        None: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∏–∞–ø–∞–∑–æ–Ω–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã–±–æ—Ä –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.
    """
    raw_input = update.message.text.strip()
    cleaned_input = raw_input.replace("I", "!").replace(" ", "")
    logging.info(f"[RANGE_INPUT] –ü–æ–ª—É—á–µ–Ω –¥–∏–∞–ø–∞–∑–æ–Ω: {cleaned_input}")

    if not RANGE_PATTERN.match(cleaned_input):
        error_text = (
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞.\n"
            "–ü—Ä–æ–≤–µ—Ä—å —Ä–∞—Å–∫–ª–∞–¥–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.\n"
            "–ü—Ä–∏–º–µ—Ä: A1:B10 –∏–ª–∏ –õ–∏—Å—Ç1!C5:D20"
        )
        msg = await send_response(update, error_text)
        await log_bot_answer(update, context, msg, error_text)
        await ask_sheet_range(update, context)
        return

    try:
        if "!" in cleaned_input:
            sheet, range_part = cleaned_input.split("!", 1)
            range_part = range_part.upper()
            sheet = sheet.strip()
            final_range = f"{sheet}!{range_part}"
            context.user_data["sheet"] = sheet
        else:
            range_part = cleaned_input.upper()
            final_range = range_part

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        if not re.match(r"^[A-Z]+\d+:[A-Z]+\d+$", range_part):
            raise ValueError("–î–∏–∞–ø–∞–∑–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã.\n–ü—Ä–æ–≤–µ—Ä—å —Ä–∞—Å–∫–ª–∞–¥–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.\n.–ù–∞–ø—Ä–∏–º–µ—Ä: –°1:F15")

        # –†–∞–∑–±–æ—Ä —è—á–µ–µ–∫ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—è–¥–∫–∞
        start_cell, end_cell = range_part.split(":")
        if not validate_cell(start_cell) or not validate_cell(end_cell):
            raise ValueError("–û–¥–Ω–∞ –∏–∑ —è—á–µ–µ–∫ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")

        start_col, start_row = split_cell(start_cell)
        end_col, end_row = split_cell(end_cell)

        if (start_col > end_col) or (start_col == end_col and int(start_row) > int(end_row)):
            raise ValueError("–î–∏–∞–ø–∞–∑–æ–Ω —É–∫–∞–∑–∞–Ω –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.\n –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ—Ä—è–¥–æ–∫ —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ –∏ —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑.\n –ù–∞–ø—Ä–∏–º–µ—Ä: A1:B10.")

        context.user_data["selected_range"] = final_range
        next_step = "ask_sheet_name" if "!" not in final_range else "confirm_macro"
        context.user_data["macro_step"] = next_step

        confirm_text = f"‚úÖ –í—ã–±—Ä–∞–Ω –¥–∏–∞–ø–∞–∑–æ–Ω: {final_range}"
        confirm_msg = await send_response(update, confirm_text)
        await log_bot_answer(update, context, confirm_msg, confirm_text)

        await (ask_sheet_name if next_step == "ask_sheet_name" else confirm_macro)(update, context)

    except ValueError as e:
        error_text = f"‚ùå {str(e)}"
        msg = await send_response(update, error_text)
        await log_bot_answer(update, context, msg, error_text)
        context.user_data["macro_step"] = "process_range_input"
        await ask_sheet_range(update, context)



