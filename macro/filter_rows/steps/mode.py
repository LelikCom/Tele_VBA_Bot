"""
mode.py

–®–∞–≥–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∏ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏–π.
"""

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, Message
from telegram.ext import ContextTypes
import logging

from macro.utils import send_response
from macro.filter_rows import state

from log_dialog.models_daig import Point

from log_dialog.handlers_diag import (
    log_step
)

from macro.filter_rows.steps.column import (
    ask_column,
    process_column_input,
)
from macro.filter_rows.steps.range import (
    ask_sheet_range,
    process_range_input,
)

from macro.filter_rows.steps.sheet import (
    ask_sheet_name,
    process_sheet_name,
)

from macro.filter_rows.steps.confirm import (
    confirm_macro,
    show_instruction_options,
)


async def handle_unknown_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —à–∞–≥–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç.

    Returns:
        None
    """
    await send_response(update, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
    context.user_data.clear()


async def handle_scenario_error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç.

    Returns:
        None
    """
    await send_response(update, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    context.user_data.clear()


@log_step(question_point=Point.SCENARIO, answer_text_getter=lambda msg: msg.text if msg.text else "attachment")
async def process_filter_rows_scenario(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫.

    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥–æ–º –º–µ–∂–¥—É —à–∞–≥–∞–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è
    –æ–Ω–∞ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏. –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —à–∞–≥ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω, –∏–ª–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—à–∏–±–∫–∞, –æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        Message: –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ —à–∞–≥–∞.
    """
    if context.user_data.get("state", "").startswith("feedback"):
        print("‚è≠ –ü—Ä–æ–ø—É—Å–∫ —à–∞–≥–∞ –º–∞–∫—Ä–æ—Å–∞ ‚Äî —Å–µ–π—á–∞—Å feedback")
        return

    handlers = {
        "ask_column": ask_column,
        "process_column": process_column_input,
        "ask_mode": ask_mode,
        "wait_for_mode": handle_mode_selection,
        "ask_manual_values": ask_manual_values,
        "process_manual_values": process_manual_values,
        "ask_sheet_range": ask_sheet_range,
        "process_range_input": process_range_input,
        "ask_sheet_name": ask_sheet_name,
        "process_sheet_name": process_sheet_name,
        "confirm_macro": confirm_macro,
        "show_instruction": show_instruction_options,
    }

    step = context.user_data.get("macro_step", "ask_column")
    print(f"–¢–µ–∫—É—â–∏–π —à–∞–≥ —Å—Ü–µ–Ω–∞—Ä–∏—è: {step}")

    try:
        if step in handlers:
            result = await handlers[step](update, context)
            return result
        else:
            return await handle_unknown_step(update, context)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏: {e}")
        return await handle_scenario_error(update, context)


@log_step(
    question_point=Point.CONFIRM,
    answer_text_getter=lambda msg: getattr(msg, 'text', '') or "–í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –∑–∞–¥–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π"
)
async def ask_mode(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Message:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π.

    –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤—ã–±–æ—Ä–∞: –≤–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏–π –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.
    –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        Message: –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞.
    """
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–í—Ä—É—á–Ω—É—é", callback_data="manual"),
            InlineKeyboardButton("–ò–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞", callback_data="range")
        ]
    ])

    state.set_step(context.user_data, "wait_for_mode")
    msg = await send_response(update, "üìç–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –∑–∞–¥–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π:", keyboard)
    return msg


async def handle_mode_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞.

    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞)
    –∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —à–∞–≥—É —Å—Ü–µ–Ω–∞—Ä–∏—è.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        None: –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏.
    """
    query = update.callback_query
    await query.answer()

    context.user_data["mode"] = query.data
    next_step = "ask_manual_values" if query.data == "manual" else "ask_sheet_range"

    context.user_data["macro_step"] = next_step
    await process_filter_rows_scenario(update, context)


async def ask_manual_values(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç Telegram –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç.

    Returns:
        None
    """
    await send_response(
        update,
        "‚úçÔ∏è –í–≤–µ–¥–∏ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n–ü—Ä–∏–º–µ—Ä: –Ø–±–ª–æ–∫–∏, 123, –¢–µ–∫—Å—Ç"
    )
    state.set_step(context.user_data, "process_manual_values")

    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    logging.info(f"–¢–µ–∫—É—â–∏–π —à–∞–≥ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {context.user_data.get('macro_step')}")


async def process_manual_values(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π.

    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω–æ–π –∑–∞–ø—è—Ç—ã–º–∏.
    –ó–Ω–∞—á–µ–Ω–∏—è –æ—á–∏—â–∞—é—Ç—Å—è –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã, —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        None: –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.
    """
    values = [v.strip() for v in update.message.text.split(",") if v.strip()]

    if not values:
        await send_response(update, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return await ask_manual_values(update, context)

    context.user_data["values"] = [f'"{v}"' for v in values]
    context.user_data["macro_step"] = "confirm_macro"
    await confirm_macro(update, context)
