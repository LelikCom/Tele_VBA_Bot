"""
column.py

–®–∞–≥–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç–æ–ª–±–µ—Ü –≤ —á–∏—Å–ª–æ": –∑–∞–ø—Ä–æ—Å —Å—Ç–æ–ª–±—Ü–∞ –∏ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞.
"""

import logging
from telegram import Update, Message
from telegram.ext import ContextTypes

from macro.utils import parse_column, send_response
from log_dialog.handlers_diag import log_bot_answer
from macro.convert_to_num.steps.start_row import ask_start_cell_step


async def ask_column_step(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∫–∞–∑–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç Telegram –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç.

    Returns:
        None
    """
    msg_text = (
        "üìç–ö–∞–∫–æ–π —Å—Ç–æ–ª–±–µ—Ü –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å?\n"
        "–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ –∏–ª–∏ –±—É–∫–≤—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´1¬ª –∏–ª–∏ ¬´A¬ª.\n"
        "–ï—Å–ª–∏ –±—É–∫–≤–∞ ‚Äî —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∞—è."
    )
    msg: Message = await send_response(update, msg_text)
    await log_bot_answer(update, context, msg, msg_text)

    context.user_data["macro_step"] = "ask_column_waiting"


async def ask_column_waiting_step(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—Ç–æ–ª–±—Ü–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–π –∏ –±—É–∫–≤–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±–æ—Ä –≤ context.user_data, –ª–æ–≥–∏—Ä—É–µ—Ç —à–∞–≥–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        None: –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    if not update.message:
        logging.error("–û–∂–∏–¥–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –ø—Ä–∏—à–ª–æ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ.")
        return

    user_input = update.message.text.strip().upper()
    logging.info(f"–ü–æ–ª—É—á–µ–Ω –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_input}")

    if any('–ê' <= c <= '–Ø' or '–∞' <= c <= '—è' for c in user_input):
        error_text = "‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–ª–±—Ü–∞.\n –ü—Ä–æ–≤–µ—Ä—å —Ä–∞—Å–∫–ª–∞–¥–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.\n –ù—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã.\n –ü—Ä–∏–º–µ—Ä: 1 –∏–ª–∏ A."
        error_msg = await update.message.reply_text(error_text)
        await log_bot_answer(update, context, msg_obj=error_msg, answer_text=error_text)
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–æ–ª–±—Ü–∞. –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_input}")

        repeat_text = (
            "üìç–ö–∞–∫–æ–π —Å—Ç–æ–ª–±–µ—Ü –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å?\n"
            "–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ –∏–ª–∏ –±—É–∫–≤—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´1¬ª –∏–ª–∏ ¬´A¬ª.\n"
            "–ï—Å–ª–∏ –±—É–∫–≤–∞ ‚Äî —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∞—è."
        )
        repeat_msg = await update.message.reply_text(repeat_text)
        await log_bot_answer(update, context, msg_obj=repeat_msg, answer_text=repeat_text)
        return

    column_num = None
    if user_input.isdigit():
        column_num = int(user_input)
    elif user_input.isalpha() and len(user_input) == 1:
        column_num = ord(user_input) - ord('A') + 1
    elif len(user_input) > 1 and user_input.isalpha():
        column_num = 0

    if column_num is None or not (1 <= column_num <= 16384):
        error_text = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–ª–±—Ü–∞.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å–∫–ª–∞–¥–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.\n–ü—Ä–∏–º–µ—Ä: 1 –∏–ª–∏ A."
        error_msg = await update.message.reply_text(error_text)
        await log_bot_answer(update, context, msg_obj=error_msg, answer_text=error_text)
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–æ–ª–±—Ü–∞. –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_input}")

        repeat_text = (
            "üìç–ö–∞–∫–æ–π —Å—Ç–æ–ª–±–µ—Ü –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å?\n"
            "–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ –∏–ª–∏ –±—É–∫–≤—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´1¬ª –∏–ª–∏ ¬´A¬ª.\n"
            "–ï—Å–ª–∏ –±—É–∫–≤–∞ ‚Äî —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∞—è."
        )
        repeat_msg = await update.message.reply_text(repeat_text)
        await log_bot_answer(update, context, msg_obj=repeat_msg, answer_text=repeat_text)
        return

    context.user_data["column_num"] = column_num
    logging.info(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞: {column_num}")

    confirm_text = f"‚úÖ –í—ã–±—Ä–∞–Ω —Å—Ç–æ–ª–±–µ—Ü: {column_num}"
    confirm_msg = await update.message.reply_text(confirm_text)
    await log_bot_answer(update, context, msg_obj=confirm_msg, answer_text=confirm_text)

    context.user_data["macro_step"] = "ask_start_cell"
    logging.info("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É: ask_start_cell")

    next_prompt = "üìç –° –∫–∞–∫–æ–π —Å—Ç—Ä–æ–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å? (–ü—Ä–∏–º–µ—Ä: 1, 2, 5 –∏ —Ç.–¥.)"
    msg = await update.message.reply_text(next_prompt)
    await log_bot_answer(update, context, msg_obj=msg, answer_text=next_prompt)


