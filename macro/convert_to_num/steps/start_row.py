"""
start_row.py

–®–∞–≥ —Å—Ü–µ–Ω–∞—Ä–∏—è "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç–æ–ª–±–µ—Ü –≤ —á–∏—Å–ª–æ": –≤–≤–æ–¥ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞–∫—Ä–æ—Å–∞.
"""

import logging
from telegram import Update, Message
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from log_dialog.models_daig import Point
from log_dialog.handlers_diag import log_step
from db.macros import fetch_macro_by_name
from macro.utils import send_response, escape_markdown_v2
from log_dialog.handlers_diag import log_bot_answer, log_question

from macro.filter_rows.steps.column import ask_column
from macro.convert_to_num.steps import (
    column,
    confirm,
    start_row,
)


def column_letter_to_number(col_letter: str) -> int:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –±—É–∫–≤—É —Å—Ç–æ–ª–±—Ü–∞ –≤ –µ–≥–æ –Ω–æ–º–µ—Ä.
    –ù–∞–ø—Ä–∏–º–µ—Ä, 'A' -> 1, 'B' -> 2, –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.

    Args:
        col_letter (str): –ë—É–∫–≤–∞ —Å—Ç–æ–ª–±—Ü–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'A', 'B').

    Returns:
        int: –ù–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è 'A' –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1, –¥–ª—è 'B' –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 2).
    """
    col_letter = col_letter.upper()
    return ord(col_letter) - ord('A') + 1


async def process_convert_column_scenario(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç —à–∞–≥–∞–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –º–∞–∫—Ä–æ—Å–∞ "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç–æ–ª–±–µ—Ü –≤ —á–∏—Å–ª–æ".

    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–π —à–∞–≥ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
    - –®–∞–≥–∏ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Ç–æ–ª–±—Ü–∞, –≤–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∞—Ä—Ç–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.
    - –ü–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (macro_step) –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        None: –§—É–Ω–∫—Ü–∏—è –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è, –Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    logging.info(f"[PROCESS_CONVERT] –ù–∞—á–∞–ª–æ —Å—Ü–µ–Ω–∞—Ä–∏—è '–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç–æ–ª–±–µ—Ü –≤ —á–∏—Å–ª–æ'.")

    steps = {
        "ask_column": column.ask_column_step,
        "ask_column_waiting": column.ask_column_waiting_step,
        "ask_start_cell": start_row.ask_start_cell_step,
        "show_instruction": confirm.show_instruction_options,
    }

    step = context.user_data.get("macro_step", "ask_column")
    logging.info(f"[PROCESS_CONVERT] –¢–µ–∫—É—â–∏–π —à–∞–≥: {step}")

    if step in steps:
        logging.info(f"[PROCESS_CONVERT] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —à–∞–≥—É: {step}")
        await steps[step](update, context)

        if step == "ask_column":
            context.user_data["macro_step"] = "ask_start_cell"
        elif step == "ask_start_cell":
            context.user_data["macro_step"] = "show_instruction"
        elif step == "show_instruction":
            logging.info("[PROCESS_CONVERT] –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à—ë–Ω.")
            context.user_data["macro_step"] = "completed"
    else:
        logging.error(f"[PROCESS_CONVERT] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ —Å—Ü–µ–Ω–∞—Ä–∏—è: {step}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ —Å—Ü–µ–Ω–∞—Ä–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.")

        context.user_data["macro_step"] = "ask_column"
        return


@log_step(
    question_point=Point.COLUMN,
    answer_text_getter=lambda msg: msg.text or "–û—Ç–≤–µ—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç–∞"
)
async def process_column_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Message:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—Ç–æ–ª–±—Ü–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.

    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü —á–∏—Å–ª–æ–≤—ã–º –∏–ª–∏ –±—É–∫–≤–µ–Ω–Ω—ã–º, –∑–∞—Ç–µ–º
    —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ª–æ–≥–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç
    –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        Message: –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞.
    """
    logging.info(f"[PROCESS_COLUMN_INPUT] –í–≤–æ–¥ —Å—Ç–æ–ª–±—Ü–∞: {update.message.text}")
    user_input = update.message.text.strip().upper()

    if user_input.isdigit():
        column_num = int(user_input)
        if not (1 <= column_num <= 16384):
            await send_response(update, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 16384.")
            return await ask_column(update, context)
    elif user_input.isalpha() and len(user_input) == 1:
        column_num = ord(user_input) - ord('A') + 1
        if not (1 <= column_num <= 16384):
            await send_response(update, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 16384.")
            return await ask_column(update, context)
    else:
        await send_response(update, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–ª–±—Ü–∞.\n–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∏–ª–∏ –±—É–∫–≤—É —Å—Ç–æ–ª–±—Ü–∞.")
        return await ask_column(update, context)

    column_num = column_letter_to_number(column_num)

    context.user_data["column_num"] = column_num
    context.user_data["column_input_type"] = "letter" if user_input.isalpha() else "number"

    logging.info(f"[PROCESS_COLUMN_INPUT] –í—ã–±—Ä–∞–Ω —Å—Ç–æ–ª–±–µ—Ü: {column_num}")

    msg = await send_response(update, f"‚úÖ –í—ã–±—Ä–∞–Ω —Å—Ç–æ–ª–±–µ—Ü: {column_num}")
    await send_response(update, "üìç–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å—Ç—Ä–æ–∫—É, —Å –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—á–Ω—ë–º.\n–ù–∞–ø—Ä–∏–º–µ—Ä: 1 –∏–ª–∏ 2.")

    context.user_data["macro_step"] = "ask_start_cell"

    return msg


async def ask_start_cell_step(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –º–∞–∫—Ä–æ—Å.

    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É,
    –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–∞–∫—Ä–æ—Å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ –≤ —á–∏—Å–ª–æ, –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        None: –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.
    """
    if not update.message:
        await update.callback_query.answer("–û–∂–∏–¥–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥!")
        logging.error("[START_CELL] –ó–∞–ø—É—Å–∫ –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    user_input = update.message.text.strip()
    logging.info(f"[START_CELL] –í–≤–µ–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {user_input}")

    await log_question(
        user_id=update.effective_user.id,
        username=update.effective_user.username,
        message_id=update.message.message_id,
        message_text=user_input,
        point=Point.START_ROW,
    )

    if not user_input.isdigit():
        error_text = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏.\n–ü—Ä–∏–º–µ—Ä: 1,2 –∏ —Ç.–¥."
        bot_msg = await send_response(update, error_text)
        await log_bot_answer(update, context, bot_msg, error_text)
        logging.warning(f"[START_CELL] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏: {user_input}")
        return

    start_cell = int(user_input)
    context.user_data["start_cell"] = start_cell
    logging.info(f"[START_CELL] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞: {start_cell}")

    confirm_text = f"‚úÖ –ù–∞—á–Ω—ë–º —Å–æ —Å—Ç—Ä–æ–∫–∏: {start_cell}"
    confirm_msg = await send_response(update, confirm_text)
    await log_bot_answer(update, context, confirm_msg, confirm_text)

    macro_template = fetch_macro_by_name("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å_—Å—Ç–æ–ª–±–µ—Ü_–≤_—á–∏—Å–ª–æ")
    if not macro_template:
        error_text = "‚ö†Ô∏è –ú–∞–∫—Ä–æ—Å '–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç–æ–ª–±–µ—Ü –≤ —á–∏—Å–ª–æ' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
        err_msg = await send_response(update, error_text)
        await log_bot_answer(update, context, err_msg, error_text)
        context.user_data.pop("macro_step", None)
        logging.error("[START_CELL] –®–∞–±–ª–æ–Ω –º–∞–∫—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    column_num = context.user_data.get("column_num")
    if not column_num:
        error_text = "‚ö†Ô∏è –ù–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥."
        err_msg = await send_response(update, error_text)
        await log_bot_answer(update, context, err_msg, error_text)
        logging.error(f"[START_CELL] column_num –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {context.user_data}")
        return

    final_macro = (
        macro_template
        .replace("{user_input_column}", str(column_num))
        .replace("{user_input_start_cell}", str(start_cell))
    )
    final_macro = escape_markdown_v2(final_macro)
    logging.info(f"[START_CELL] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –º–∞–∫—Ä–æ—Å –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ {str(column_num)}, —Å—Ç—Ä–æ–∫–∏ {start_cell}")

    macro_msg_text = f"–¢–≤–æ–π –º–∞–∫—Ä–æ—Å:\n\n```vba\n{final_macro}\n```"
    macro_msg = await send_response(update, macro_msg_text, parse_mode=ParseMode.MARKDOWN_V2)
    await log_bot_answer(update, context, macro_msg, macro_msg_text)

    context.user_data["macro_step"] = "show_instruction"
    logging.info("[START_CELL] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É: show_instruction")
    await process_convert_column_scenario(update, context)



